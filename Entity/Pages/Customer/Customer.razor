@page "/Customer"

@if (data == null)
{
    <h1>Loading............</h1>
}
else
{
    <MudPaper Elevation="20" Square="false">
    <MudToolBar Dense="false" DisableGutters="true">
        <MudSpacer />
            <MudIconButton Icon="@Icons.Material.Outlined.Add" Variant="Variant.Filled" Color="MudBlazor.Color.Primary" ButtonType="ButtonType.Button" @onclick="(() => AddNewAsync())" title="เพิ่มข้อมูล" Class="mr-1">เพิ่มข้อมูล</MudIconButton>
    </MudToolBar>
</MudPaper>

    <MudTable Virtualize="true" Hover="true" Loading="@_loaded" Elevation="25" Items="data" Dense="true" Bordered="false" Striped="false" Filter="new Func<customer, bool>(Search)" @bind-user="_Customer">
        <ToolBarContent>
            <MudSpacer />
            <MudTextField @bind-Value="_searchString" Immediate="true" FullWidth=false Placeholder="ค้นหา" Adornment="Adornment.End" AdornmentIcon="@Icons.Material.Filled.Search" IconSize="MudBlazor.Size.Medium" Class="mt-0 mb-3"></MudTextField>
        </ToolBarContent>
        <HeaderContent>
            <MudTh><MudTableSortLabel SortBy="new Func<customer, object>(x => x.name1)">ชื่อลูกค้า 1</MudTableSortLabel></MudTh>
            <MudTh><MudTableSortLabel SortBy="new Func<customer, object>(x => x.name2)">ชื่อลูกค้า 2</MudTableSortLabel></MudTh>
            <MudTh><MudTableSortLabel SortBy="new Func<customer, object>(x => x.age)">อายุุ</MudTableSortLabel></MudTh>
            <MudTh Style="text-align:center;width:70px;">Actions</MudTh>
        </HeaderContent>
        <RowTemplate>
            <MudTd DataLabel="ชื่อลูกค้า 1">
                <MudHighlighter Text="@context.name1" HighlightedText="@_searchString" />
            </MudTd>
            <MudTd DataLabel="ชื่อลูกค้า 2">
                <MudHighlighter Text="@context.name2" HighlightedText="@_searchString" />
            </MudTd>
            <MudTd DataLabel="อายุุ">
                <MudHighlighter Text="@context.age.ToString()" HighlightedText="@_searchString" />
            </MudTd>
            <MudTd DataLabel="Actions" Style="text-align:center">
                <MudMenu Label="Actions" Variant="Variant.Outlined" FullWidth="false" Icon="@Icons.Material.Outlined.Settings" Dense="true" DisableElevation="true" EndIcon="@Icons.Filled.KeyboardArrowDown" IconColor="MudBlazor.Color.Surface" Direction="Direction.Left" AnchorOrigin="Origin.TopLeft" OffsetX="true">
                    <MudMenuItem OnClick="(()=>Edit(context.id))">
                        <MudIcon Icon="@Icons.Material.Outlined.Edit" Color="MudBlazor.Color.Primary" Size="MudBlazor.Size.Small" Title="แก้ไข"></MudIcon>
                        แก้ไข
                    </MudMenuItem>
                    <MudMenuItem OnClick="(()=>Delete(context.id))">
                        <MudIcon Icon="@Icons.Material.Outlined.Delete" Color="MudBlazor.Color.Error" Size="MudBlazor.Size.Small" Title="ลบ"></MudIcon>
                        ลบ
                    </MudMenuItem>
                </MudMenu>
            </MudTd>
        </RowTemplate>
        <PagerContent>
            <MudTablePager />
        </PagerContent>
    </MudTable>
}
@code {
    List<customer> data = new List<customer>();
    bool _loaded = false;
    customer _Customer { get; set; }
    string _searchString = "";
    protected override void OnInitialized()
    {
        data = customerService.GetAll();
        StateHasChanged();
    }

    private bool Search(customer cust)
    {
        if (string.IsNullOrWhiteSpace(_searchString)) return true;

        if (cust.name1?.Contains(_searchString, StringComparison.OrdinalIgnoreCase) == true)
        {
            return true;
        }
        if (cust.name2?.Contains(_searchString, StringComparison.OrdinalIgnoreCase) == true)
        {
            return true;
        }
        if (cust.age.ToString()?.Contains(_searchString, StringComparison.OrdinalIgnoreCase) == true)
        {
            return true;
        }
        return false;
    }


    async void Edit(int Id)
    {
        NavigationManager.NavigateTo($"CustomerEdit/{Id}");
    }

    async void Delete(int Id)
    {
        var data = customerService.GetById(Id);
        customerService.Delete(data);
        OnInitialized();
        StateHasChanged();
    }

    async void AddNewAsync()
    {
        NavigationManager.NavigateTo($"CustomerEdit/0");
    }
}
